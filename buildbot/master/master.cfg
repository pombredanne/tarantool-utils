# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave

mac_mini_host = "195.218.191.195"

c['slaves'] = [
    BuildSlave("tt-dev.mail.ru", "PASSWORD"),
    BuildSlave("centos-i386", "PASSWORD"),
    BuildSlave("freebsd-i386", "PASSWORD"),
    BuildSlave("debian-builder", "PASSWORD"),
    BuildSlave(mac_mini_host, "PASSWORD")
]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes.gitpoller import GitPoller

c['change_source'] = []
c['change_source'].append(
	GitPoller('git://github.com/mailru/tarantool.git',
                  workdir='gitpoller-master', branch='master',
                  pollinterval=300)
)
c['change_source'].append(
	GitPoller('git://github.com/mailru/tarantool.git',
                  workdir='gitpoller-master-stable', branch='master-stable',
                  pollinterval=300)
)

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.changes import filter
c['schedulers'] = []
c['schedulers'].append(SingleBranchScheduler(name="master branch",
        change_filter=filter.ChangeFilter(branch='master'),
        treeStableTimer=None,
        builderNames=[
		"Homepage",
		"Source",
		"CentOS amd64 (Debug) (tarball)",
		"CentOS amd64 (RelWithDebInfo) (tarball)",
		"CentOS amd64 (Debug) (rpm)",
		"CentOS amd64 (RelWithDebInfo) (rpm)",
		"CentOS i386 (Debug) (tarball)",
		"CentOS i386 (RelWithDebInfo) (tarball)",
		"CentOS i386 (Debug) (rpm)",
		"CentOS i386 (RelWithDebInfo) (rpm)",
		"FreeBSD i386 (RelWithDebInfo) (tarball)",
		"Debian Sid i386 (deb)",
		"Debian Sid amd64 (deb)",
#		"Debian Squeeze i386 (deb)",
#		"Debian Squeeze amd64 (deb)",
		"Debian Wheezy i386 (deb)",
		"Debian Wheezy amd64 (deb)",
#		"Ubuntu Precise i386 (deb)",
		"Ubuntu Precise amd64 (deb)"
#		"Mac OS X 11.04 (testing)"
       ]
))

c['schedulers'].append(SingleBranchScheduler(name="master stable branch",
        change_filter=filter.ChangeFilter(branch='master-stable'),
        treeStableTimer=None,
        builderNames=[
		"STABLE Source",
		"STABLE CentOS amd64 (Debug) (tarball)",
		"STABLE CentOS amd64 (RelWithDebInfo) (tarball)",
		"STABLE CentOS amd64 (Debug) (rpm)",
		"STABLE CentOS amd64 (RelWithDebInfo) (rpm)",
		"STABLE CentOS i386 (Debug) (tarball)",
		"STABLE CentOS i386 (RelWithDebInfo) (tarball)",
		"STABLE CentOS i386 (Debug) (rpm)",
		"STABLE CentOS i386 (RelWithDebInfo) (rpm)",
		"STABLE FreeBSD i386 (RelWithDebInfo) (tarball)",
		"STABLE Debian Sid i386 (deb)",
		"STABLE Debian Sid amd64 (deb)",
#		"STABLE Debian Squeeze i386 (deb)",
#		"STABLE Debian Squeeze amd64 (deb)",
		"STABLE Debian Wheezy i386 (deb)",
		"STABLE Debian Wheezy amd64 (deb)",
#		"STABLE Ubuntu Precise i386 (deb)",
		"STABLE Ubuntu Precise amd64 (deb)"
#		"STABLE Mac OS X 11.04 (testing)"
      ]
))


#=============================================================================#
# BUILDERS
#=============================================================================#

#-----------------------------------------------------------------------------#
# Build factories
#-----------------------------------------------------------------------------#

from buildbot.process.factory import BuildFactory
from buildbot.steps.source import Git
from buildbot.steps.shell import ShellCommand
from buildbot.steps.shell import Compile
from buildbot.steps.shell import Test
from buildbot import locks

def buildTarantoolHomepage(branch, portLock):
    buildFactory = BuildFactory()
    # check out the source
    buildFactory.addStep(Git(repourl='git://github.com/mailru/tarantool.git',
                             mode = 'copy',
                             branch = branch))

    buildFactory.addStep(ShellCommand(command = ["cmake", ".", "-DENABLE_DOC=ON"],
                                      description = "configuration"))

    buildFactory.addStep(Compile())

    buildFactory.addStep(ShellCommand(command = "make -C doc/www-data.in",
                        	      locks = [ portLock.access('exclusive') ],
				      description = "generating"))

    buildFactory.addStep(ShellCommand(command = "upload_to_root doc/www-data/*",
                        	      locks = [ portLock.access('exclusive') ],
				      description = "uploading"))

    return buildFactory

def buildTarantoolSource(uploader, upload_ext, branch, portLock):
    buildFactory = BuildFactory()
    # check out the source
    buildFactory.addStep(Git(repourl='git://github.com/mailru/tarantool.git',
                             mode = 'copy',
                             branch = branch))

    buildFactory.addStep(ShellCommand(command = ["cmake", "."],
                                      description = "configuration"))

    buildFactory.addStep(ShellCommand(command = "make package_source",
                        	      locks = [ portLock.access('exclusive') ],
				      description = "packaging"))

    buildFactory.addStep(ShellCommand(command = "%s %s" % (uploader, upload_ext),
                        	      locks = [ portLock.access('exclusive') ],
				      description = "uploading"))

    return buildFactory

def buildTarantool(buildType, isStatic, packageType, uploader, upload_ext, buildDoc, branch, portLock):
    buildFactory = BuildFactory()
    # check out the source
    buildFactory.addStep(Git(repourl='git://github.com/mailru/tarantool.git',
                             mode = 'copy',
                             branch = branch))
    # generate Makefiles via CMake
    buildFactory.addStep(ShellCommand(command = ["cmake",
                                                 ".",
                                                 "-DCMAKE_BUILD_TYPE=%s" % (buildType),
                                                 "-DENABLE_DOC=%s" % (buildDoc),
                                                 "-DENABLE_STATIC=%s" % (isStatic),
                                                 "-DCPACK_GENERATOR=%s" % (packageType),
                                                 "-DENABLE_CLIENT=ON"],
                                      description = "configuration"))
    # build project
    buildFactory.addStep(Compile())
    # run the tests
#    buildFactory.addStep(ShellCommand(command = "make test",
#                        	      locks = [ portLock.access('exclusive') ],
#				      description = "test"))
    # build packages
    buildFactory.addStep(ShellCommand(command = "make package",
                        	      locks = [ portLock.access('exclusive') ],
				      description = "packaging"))
    # uploading package
    buildFactory.addStep(ShellCommand(command = "%s %s" % (uploader, upload_ext),
                        	      locks = [ portLock.access('exclusive') ],
				      description = "uploading"))
    return buildFactory

def buildTarantoolDebian(repo, dist, portLock):
    buildFactory = BuildFactory()
    cmd = "(cd /home/buildbot/builder ; ./builder.sh build %s)" % (dist)
    buildFactory.addStep(ShellCommand(command = cmd,
                        	      locks = [ portLock.access('exclusive') ],
				      description = "building"))
    cmd = "(cd /home/buildbot/builder ; ./builder.sh import %s)" % (dist)
    buildFactory.addStep(ShellCommand(command = cmd,
                        	      locks = [ portLock.access('exclusive') ],
				      description = "synchronizing"))
    cmd = "sitecopy -u %s" % (repo)
    buildFactory.addStep(ShellCommand(command = cmd,
                        	      locks = [ portLock.access('exclusive') ],
				      description = "uploading %s" % (repo)))
    return buildFactory

def buildTarantoolMacOSX(buildType, packageType, buildDoc, branch, portLock):
    buildFactory = BuildFactory()
    buildFactory.addStep(Git(repourl='git://github.com/mailru/tarantool.git',
                             mode = 'copy',
                             branch = branch))
    # generate Makefiles via CMake
    buildFactory.addStep(ShellCommand(command = ["cmake",
                                                 ".",
                                                 "-DCMAKE_BUILD_TYPE=%s" % (buildType),
                                                 "-DENABLE_DOC=%s" % (buildDoc),
                                                 "-DENABLE_STATIC=OFF",
                                                 "-DCPACK_GENERATOR=%s" % (packageType),
                                                 "-DENABLE_CLIENT=ON"],
                                      description = "configuration"))
    # build project
    buildFactory.addStep(Compile())
    # run the tests
    buildFactory.addStep(ShellCommand(command = "make test",
                        	      locks = [ portLock.access('exclusive') ],
				      description = "test"))
    # build packages
#    buildFactory.addStep(ShellCommand(command = "make package",
#                        	      locks = [ portLock.access('exclusive') ],
#				      description = "packaging"))
    return buildFactory

#-----------------------------------------------------------------------------#
# Build configurations
#-----------------------------------------------------------------------------#

from buildbot.config import BuilderConfig

c['builders'] = []

##########################################
#                                        #
#       master branch builders           #
#                                        #
##########################################

## 
## tt-dev.mail.ru (localhost) building
##
portLock = locks.MasterLock("tt-dev.mail.ru lock")

c['builders'].append(
    BuilderConfig(name="Homepage",
                  slavenames=["tt-dev.mail.ru"],
                  factory=buildTarantoolHomepage(branch = "master",
                                                 portLock = portLock)))

c['builders'].append(
    BuilderConfig(name="Source",
                  slavenames=["tt-dev.mail.ru"],
                  factory=buildTarantoolSource(branch = "master",
                                               uploader = "upload_to_dist_ext",
                                               upload_ext = "tar.gz",
                                               portLock = portLock)))

c['builders'].append(
    BuilderConfig(name="CentOS amd64 (Debug) (tarball)",
                  slavenames=["tt-dev.mail.ru"],
                  factory=buildTarantool(buildType = "Debug",
                                         isStatic = "ON",
                                         packageType = "TGZ",
                                         uploader = "upload_to_dist_ext",
                                         upload_ext = "tar.gz",
                                         buildDoc = "ON",
                                         branch = "master",
					 portLock = portLock)))

c['builders'].append(
    BuilderConfig(name="CentOS amd64 (RelWithDebInfo) (tarball)",
                  slavenames=["tt-dev.mail.ru"],
                  factory=buildTarantool(buildType = "RelWithDebInfo",
				         isStatic = "ON",
                                         packageType = "TGZ",
                                         uploader = "upload_to_dist_ext",
                                         upload_ext = "tar.gz",
                                         buildDoc = "ON",
                                         branch = "master",
					 portLock = portLock)))

c['builders'].append(
    BuilderConfig(name="CentOS amd64 (Debug) (rpm)",
                  slavenames=["tt-dev.mail.ru"],
                  factory=buildTarantool(buildType = "Debug",
                                         isStatic = "ON",
                                         packageType = "RPM",
                                         uploader = "upload_to_dist_ext",
                                         upload_ext = "rpm",
                                         buildDoc = "ON",
                                         branch = "master",
					 portLock = portLock)))


c['builders'].append(
    BuilderConfig(name="CentOS amd64 (RelWithDebInfo) (rpm)",
                  slavenames=["tt-dev.mail.ru"],
                  factory=buildTarantool(buildType = "RelWithDebInfo",
				         isStatic = "ON",
                                         packageType = "RPM",
                                         uploader = "upload_to_dist_ext",
                                         upload_ext = "rpm",
                                         buildDoc = "ON",
                                         branch = "master",
					 portLock = portLock)))
## 
## centos-i386 vm building
##
c['builders'].append(
    BuilderConfig(name="CentOS i386 (Debug) (tarball)",
                  slavenames=["centos-i386"],
                  factory=buildTarantool(buildType = "Debug",
                                         isStatic = "ON",
                                         packageType = "TGZ",
                                         uploader = "upload_to_dist_ext",
                                         upload_ext = "tar.gz",
                                         buildDoc = "ON",
                                         branch = "master",
					 portLock = portLock)))

c['builders'].append(
    BuilderConfig(name="CentOS i386 (RelWithDebInfo) (tarball)",
                  slavenames=["centos-i386"],
                  factory=buildTarantool(buildType = "RelWithDebInfo",
				         isStatic = "ON",
                                         packageType = "TGZ",
                                         uploader = "upload_to_dist_ext",
                                         upload_ext = "tar.gz",
                                         buildDoc = "ON",
                                         branch = "master",
					 portLock = portLock)))

c['builders'].append(
    BuilderConfig(name="CentOS i386 (Debug) (rpm)",
                  slavenames=["centos-i386"],
                  factory=buildTarantool(buildType = "Debug",
                                         isStatic = "ON",
                                         packageType = "RPM",
                                         uploader = "upload_to_dist_ext",
                                         upload_ext = "rpm",
                                         buildDoc = "ON",
                                         branch = "master",
					 portLock = portLock)))


c['builders'].append(
    BuilderConfig(name="CentOS i386 (RelWithDebInfo) (rpm)",
                  slavenames=["centos-i386"],
                  factory=buildTarantool(buildType = "RelWithDebInfo",
				         isStatic = "ON",
                                         packageType = "RPM",
                                         uploader = "upload_to_dist_ext",
                                         upload_ext = "rpm",
                                         buildDoc = "ON",
                                         branch = "master",
					 portLock = portLock)))

## 
## freebsd-i386 vm building
##
c['builders'].append(
    BuilderConfig(name="FreeBSD i386 (RelWithDebInfo) (tarball)",
                  slavenames=["freebsd-i386"],
                  factory=buildTarantool(buildType = "RelWithDebInfo",
				         isStatic = "ON",
                                         packageType = "TGZ",
                                         uploader = "upload_to_dist_ext",
                                         upload_ext = "tar.gz",
                                         buildDoc = "OFF",
                                         branch = "master",
					 portLock = portLock)))

## 
## debian-builder vm building
##
c['builders'].append(
    BuilderConfig(name="Debian Wheezy i386 (deb)",
                  slavenames=["debian-builder"],
                  factory=buildTarantoolDebian(repo = "debian", 
                                               dist="wheezy-i386",
					       portLock = portLock)))
c['builders'].append(
    BuilderConfig(name="Debian Wheezy amd64 (deb)",
                  slavenames=["debian-builder"],
                  factory=buildTarantoolDebian(repo = "debian",
                                               dist="wheezy-amd64",
					       portLock = portLock)))

c['builders'].append(
    BuilderConfig(name="Debian Sid i386 (deb)",
                  slavenames=["debian-builder"],
                  factory=buildTarantoolDebian(repo = "debian",
                                               dist="sid-i386",
					       portLock = portLock)))

c['builders'].append(
    BuilderConfig(name="Debian Sid amd64 (deb)",
                  slavenames=["debian-builder"],
                  factory=buildTarantoolDebian(repo = "debian",
                                               dist="sid-amd64",
					       portLock = portLock)))

#c['builders'].append(
#    BuilderConfig(name="Ubuntu Precise i386 (deb)",
#                  slavenames=["debian-builder"],
#                  factory=buildTarantoolDebian(repo = "ubuntu",
#                                               dist="precise-i386",
#					        portLock = portLock)))

c['builders'].append(
    BuilderConfig(name="Ubuntu Precise amd64 (deb)",
                  slavenames=["debian-builder"],
                  factory=buildTarantoolDebian(repo = "ubuntu",
                                               dist="precise-amd64",
					       portLock = portLock)))

## 
## mac-mini
##

#c['builders'].append(
#    BuilderConfig(name="Mac OS X 11.04 (testing)",
#                  slavenames=[mac_mini_host],
#                  factory=buildTarantoolMacOSX(buildType = "RelWithDebInfo",
#                                               packageType = "TGZ",
#                                               buildDoc = "OFF",
#                                               branch = "master",
#					       portLock = portLock)))

##########################################
#                                        #
#     master stable branch builders      #
#                                        #
##########################################

c['builders'].append(
    BuilderConfig(name="STABLE Source",
                  slavenames=["tt-dev.mail.ru"],
                  factory=buildTarantoolSource(branch = "master-stable",
                                               uploader = "upload_to_dist_ext_stable",
                                               upload_ext = "tar.gz",
                                               portLock = portLock)))

c['builders'].append(
    BuilderConfig(name="STABLE CentOS amd64 (Debug) (tarball)",
                  slavenames=["tt-dev.mail.ru"],
                  factory=buildTarantool(buildType = "Debug",
                                         isStatic = "ON",
                                         packageType = "TGZ",
                                         uploader = "upload_to_dist_ext_stable",
                                         upload_ext = "tar.gz",
                                         buildDoc = "ON",
                                         branch = "master-stable",
					 portLock = portLock)))

c['builders'].append(
    BuilderConfig(name="STABLE CentOS amd64 (RelWithDebInfo) (tarball)",
                  slavenames=["tt-dev.mail.ru"],
                  factory=buildTarantool(buildType = "RelWithDebInfo",
				         isStatic = "ON",
                                         packageType = "TGZ",
                                         uploader = "upload_to_dist_ext_stable",
                                         upload_ext = "tar.gz",
                                         buildDoc = "ON",
                                         branch = "master-stable",
					 portLock = portLock)))

c['builders'].append(
    BuilderConfig(name="STABLE CentOS amd64 (Debug) (rpm)",
                  slavenames=["tt-dev.mail.ru"],
                  factory=buildTarantool(buildType = "Debug",
                                         isStatic = "ON",
                                         packageType = "RPM",
                                         uploader = "upload_to_dist_ext_stable",
                                         upload_ext = "rpm",
                                         buildDoc = "ON",
                                         branch = "master-stable",
					 portLock = portLock)))


c['builders'].append(
    BuilderConfig(name="STABLE CentOS amd64 (RelWithDebInfo) (rpm)",
                  slavenames=["tt-dev.mail.ru"],
                  factory=buildTarantool(buildType = "RelWithDebInfo",
				         isStatic = "ON",
                                         packageType = "RPM",
                                         uploader = "upload_to_dist_ext_stable",
                                         upload_ext = "rpm",
                                         buildDoc = "ON",
                                         branch = "master-stable",
					 portLock = portLock)))
## 
## centos-i386 vm building
##
c['builders'].append(
    BuilderConfig(name="STABLE CentOS i386 (Debug) (tarball)",
                  slavenames=["centos-i386"],
                  factory=buildTarantool(buildType = "Debug",
                                         isStatic = "ON",
                                         packageType = "TGZ",
                                         uploader = "upload_to_dist_ext_stable",
                                         upload_ext = "tar.gz",
                                         buildDoc = "ON",
                                         branch = "master-stable",
					 portLock = portLock)))

c['builders'].append(
    BuilderConfig(name="STABLE CentOS i386 (RelWithDebInfo) (tarball)",
                  slavenames=["centos-i386"],
                  factory=buildTarantool(buildType = "RelWithDebInfo",
				         isStatic = "ON",
                                         packageType = "TGZ",
                                         uploader = "upload_to_dist_ext_stable",
                                         upload_ext = "tar.gz",
                                         buildDoc = "ON",
                                         branch = "master-stable",
					 portLock = portLock)))

c['builders'].append(
    BuilderConfig(name="STABLE CentOS i386 (Debug) (rpm)",
                  slavenames=["centos-i386"],
                  factory=buildTarantool(buildType = "Debug",
                                         isStatic = "ON",
                                         packageType = "RPM",
                                         uploader = "upload_to_dist_ext_stable",
                                         upload_ext = "rpm",
                                         buildDoc = "ON",
                                         branch = "master-stable",
					 portLock = portLock)))


c['builders'].append(
    BuilderConfig(name="STABLE CentOS i386 (RelWithDebInfo) (rpm)",
                  slavenames=["centos-i386"],
                  factory=buildTarantool(buildType = "RelWithDebInfo",
				         isStatic = "ON",
                                         packageType = "RPM",
                                         uploader = "upload_to_dist_ext_stable",
                                         upload_ext = "rpm",
                                         buildDoc = "ON",
                                         branch = "master-stable",
					 portLock = portLock)))

## 
## freebsd-i386 vm building
##
c['builders'].append(
    BuilderConfig(name="STABLE FreeBSD i386 (RelWithDebInfo) (tarball)",
                  slavenames=["freebsd-i386"],
                  factory=buildTarantool(buildType = "RelWithDebInfo",
				         isStatic = "ON",
                                         packageType = "TGZ",
                                         uploader = "upload_to_dist_ext_stable",
                                         upload_ext = "tar.gz",
                                         buildDoc = "OFF",
                                         branch = "master-stable",
					 portLock = portLock)))

## 
## debian-builder vm building
##
c['builders'].append(
    BuilderConfig(name="STABLE Debian Wheezy i386 (deb)",
                  slavenames=["debian-builder"],
                  factory=buildTarantoolDebian(repo = "debian_stable", 
                                               dist="wheezy-i386-stable",
					       portLock = portLock)))
c['builders'].append(
    BuilderConfig(name="STABLE Debian Wheezy amd64 (deb)",
                  slavenames=["debian-builder"],
                  factory=buildTarantoolDebian(repo = "debian_stable",
                                               dist="wheezy-amd64-stable",
					       portLock = portLock)))

c['builders'].append(
    BuilderConfig(name="STABLE Debian Sid i386 (deb)",
                  slavenames=["debian-builder"],
                  factory=buildTarantoolDebian(repo = "debian_stable",
                                               dist="sid-i386-stable",
					       portLock = portLock)))

c['builders'].append(
    BuilderConfig(name="STABLE Debian Sid amd64 (deb)",
                  slavenames=["debian-builder"],
                  factory=buildTarantoolDebian(repo = "debian_stable",
                                               dist="sid-amd64-stable",
					       portLock = portLock)))

#c['builders'].append(
#    BuilderConfig(name="STABLE Ubuntu Precise i386 (deb)",
#                  slavenames=["debian-builder"],
#                  factory=buildTarantoolDebian(repo = "ubuntu_stable",
#                                               dist="precise-i386",
#                                               branch = "master-stable",
#					        portLock = portLock)))

c['builders'].append(
    BuilderConfig(name="STABLE Ubuntu Precise amd64 (deb)",
                  slavenames=["debian-builder"],
                  factory=buildTarantoolDebian(repo = "ubuntu_stable",
                                               dist="precise-amd64-stable",
					       portLock = portLock)))

## 
## mac-mini
##
#c['builders'].append(
#    BuilderConfig(name="STABLE Mac OS X 11.04 (testing)",
#                  slavenames=[mac_mini_host],
#                  factory=buildTarantoolMacOSX(buildType = "RelWithDebInfo",
#                                               packageType = "TGZ",
#                                               buildDoc = "OFF",
#                                               branch = "master-stable",
#					        portLock = portLock)))


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz
from buildbot.status.mail import MailNotifier

authz_cfg = authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    gracefulShutdown = False,
    forceBuild = True, # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

mn = MailNotifier(fromaddr = "tarantool-bot@mail.ru",
                  mode = "failing",
                  sendToInterestedUsers = False,
                  extraRecipients = ["tarantool-private@ml.corp.mail.ru"],
#                  extraRecipients = ["pmwkaa@tarantool.org"],
                  relayhost = "smpt.mail.ru",
                  smtpUser="tarantool-bot@mail.ru",
                  smtpPassword="PASSWORD")
c['status'].append(mn)


####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Tarantool"
c['titleURL'] = "http://tarantool.org/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://tt-dev.mail.ru:8010/"

####### DB URL

# This specifies what database buildbot uses to store change and scheduler
# state.  You can leave this at its default for all but the largest
# installations.
c['db_url'] = "sqlite:///state.sqlite"

